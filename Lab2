using System;

class TestClass
{

    // завдання 1.1
    public static double FindNegProduct(double[] vector) // знаходження добутку від'ємних елементів вектора (одновимірного масиву)
    {
        double product = 1f;

        for(int i = 0; i < vector.Length; i++)
        {
            if(vector[i] < 0)
            {
                product *= vector[i];
            }
        }

        return product;
    }


    // завдання 1.2
    public static double CalculScalarProduct(double[] vector1, double[] vector2) // знаходження скалярного добутку векторів
    {
        double scalar = 0f;

        for(int i = 0; i < vector1.Length; i++)
        {
            scalar += vector1[i] * vector2[i];
        }

        return scalar;
    }

    public static double CalculExpression(double scalar1, double scalar2) // обчислення значення виразу
    {
        return 2 * scalar1 - 3 * scalar2;
    }


    // завдання 1.3
    public static double[] TransformArray(double[] arr) // перетворити масив, щоб першими розташовувались елементи за модулем
                                                      // не більші 1, а далі всі інші
    {
        double[] newArr = new double[arr.Length];
        int counter = 0;

        for(int i = 0; i < arr.Length; i++)
        {
            if (Math.Abs(arr[i]) <= 1.0)
            {
                newArr[counter] = arr[i];
                counter++;
            }
        }

        for(int i = 0; i < arr.Length; i++)
        {
            if (Math.Abs(arr[i]) > 1.0)
            {
                newArr[counter] = arr[i];
                counter++;
            }
        }

        return newArr;
    }

    // завдання 2.1
    public static void PlaceMatrixElem(int[,] squareMatr) // розміщуємо елементи непарних стовпців матриці у порядку спадання
    {

        int max = 0;
        int maxIndex = -1;

        for (int i = 1; i < squareMatr.GetLength(1); i += 2) 
        {
            for (int j = 0; j < squareMatr.GetLength(0); j++) 
            {
                max = squareMatr[j, i];
                maxIndex = j;

                for (int h = j + 1; h < squareMatr.GetLength(0); h++) 
                {
                    if (squareMatr[h, i] > max)
                    {
                        max = squareMatr[h, i];
                        maxIndex = h;
                    }
                }

                if(maxIndex != j)
                {
                    squareMatr[maxIndex, i] = squareMatr[j, i];
                    squareMatr[j, i] = max;
                }

            }

        }
    }

    // завдання 2.2
    public static void SwapMatrixColumns(int[,] matr) // переставляємо колонки матриці за ростом характеристик стовпців
                                                      // характеристика - це сума модулів від'ємних непарних елементів стовпця
    {
        int[] colCharact = new int[matr.GetLength(1)];
        int min = 0;
        int minIndex = -1;
        int tmp;

        for (int i = 0; i < matr.GetLength(1); i++)
        {
            colCharact[i] = 0;
            for (int j = 1; j < matr.GetLength(0); j += 2)
            {
                if (matr[j, i] < 0)
                {
                    colCharact[i] += -matr[j, i];
                    
                }
            }

        }

        for(int i = 0; i < matr.GetLength(1); i++)
        {
            min = colCharact[i];
            minIndex = i;

            for(int j = i + 1; j < matr.GetLength(1); j++)
            {
                if (colCharact[j] < min)
                {
                    min = colCharact[j];
                    minIndex = j;
                }
            }

            if(minIndex != i)
            {
                colCharact[minIndex] = colCharact[i];
                colCharact[i] = min;
                

                for (int j = 0; j < matr.GetLength(0); j++)
                {
                    tmp = matr[j, minIndex];
                    matr[j, minIndex] = matr[j, i];
                    matr[j, i] = tmp;
                }
            }

        }

    }

    // завдання 2.3
    public static int[] CalculColSum(int[,] matr) // обчислюємо суму елементів тих колонок, де є хоча б один від'ємний елемент
    {
        int[] colSum = new int[matr.GetLength(1)];
        bool isNegative;

        for(int i = 0; i < matr.GetLength(1); i++)
        {
            colSum[i] = 0;
            isNegative = false;

            for(int j = 0; j < matr.GetLength(0); j++)
            {
                if(matr[j, i] < 0)
                {
                    isNegative = true;
                    break;
                }
            }

            if (isNegative)
            {
                for(int j = 0; j < matr.GetLength(0); j++)
                {
                    colSum[i] += matr[j, i];
                }
            }
            
        }

        return colSum;

    }
    

    // заповнення вектора (одновимірного масиву) випадковими значеннями
    public static void FillRandVector<T>(T[] vector)
    {
        Random random = new Random(/*DateTime.Now.Millisecond*/);
        for(int i = 0; i < vector.Length; i++)
        {
            if(typeof(T) == typeof(int))
            {
                vector[i] = (T)(object)random.Next(-10, 11);
            }
            else if(typeof(T) == typeof(double))
            {
                vector[i] = (T)(object)(random.NextDouble() * 20 - 10);
            }
        }
    }

    // заповнення матриці (двовимірного масиву) випадковими значеннями
    public static void FillRandMatrix<T>(T[,] matrix)
    {
        Random random = new Random(DateTime.Now.Millisecond);
        for (int i = 0; i < matrix.GetLength(0); i++)
        {
            for(int j = 0; j < matrix.GetLength(1); j++)
            {
                if (typeof(T) == typeof(int))
                {
                    matrix[i, j] = (T)(object)random.Next(-10, 11);
                }
                else if (typeof(T) == typeof(double))
                {
                    matrix[i, j] = (T)(object)(random.NextDouble() * 20 - 10);
                }
            }
            
        }
    }

    // виведення вектора (одновимірного масиву)
    public static void PrintVector<T>(T[] vector) {
        Console.Write("\nНаш вектор: { ");

        for(int i = 0; i < vector.Length; i++)
        {
            Console.Write(vector[i] + ", ");
        }

        Console.WriteLine("}\n");
    } 

    // виведення матриці (двовимірного масиву)
    public static void PrintMatrix<T>(T[,] matrix)
    {
        Console.WriteLine("\nНаша матриця:");

        for(int i = 0; i < matrix.GetLength(0); i++)
        {
            for(int j = 0; j < matrix.GetLength(1); j++)
            {
                Console.Write(matrix[i, j] + "\t\t");
            }
            Console.WriteLine();
        }
        Console.WriteLine();
    }
    public static void Main()
    {
        Random random = new Random(DateTime.Now.Millisecond);

        Console.OutputEncoding = System.Text.Encoding.UTF8;
        Console.InputEncoding = System.Text.Encoding.UTF8;

        for(int i = 0; i < 6; i++)
        {
            Console.WriteLine("\n------------------------------------------------------");
            Console.WriteLine("Завдання {0}.{1}:", (i <= 2 ? 1 : 2), (i <= 2 ? i + 1 : i - 2));

            switch (i)
            {
                case 0:
                    Console.WriteLine("Створимо вектор (одновимірний масив) з випадковою кількістю елементів і випадковими значеннями.");
                    double[] vector1 = new double[random.Next(5, 11)];
                    FillRandVector(vector1);
                    PrintVector(vector1);
                    Console.WriteLine("Знайдемо добуток від'ємних елементів цього вектора: " + FindNegProduct(vector1));
                    break;

                case 1:
                    Console.WriteLine("Створимо три вектори a, b і с одної випадкової розмірності і заповнимо їх випадковими значеннями");
                    int dimension = random.Next(2, 7);
                    double[] a = new double[dimension],
                             b = new double[dimension],
                             c = new double[dimension];

                    Console.WriteLine("Вектор а:");
                    FillRandVector(a);
                    PrintVector(a);

                    Console.WriteLine("Вектор b:");
                    FillRandVector(b);
                    PrintVector(b);

                    Console.WriteLine("Вектор c:");
                    FillRandVector(c);
                    PrintVector(c);

                    Console.WriteLine("Обчислимо значення виразу s=2<a,b>-3<a,c>, де <x, y> - скалярний добуток векторів: ");
                    Console.WriteLine(CalculExpression(CalculScalarProduct(a, b), CalculScalarProduct(a, c)));
                    break;

                case 2:
                    Console.WriteLine("Створимо вектор (одновимірний масив) з випадковою кількістю елементів і випадковими значеннями.");
                    double[] vector2 = new double[random.Next(5, 11)];

                    FillRandVector(vector2);
                    PrintVector(vector2);

                    Console.WriteLine("Перетворимо масив таким чином, щоб елементи за модулем менші 1 стояли на початку масиву: ");
                    vector2 = TransformArray(vector2);
                    PrintVector(vector2);
                    break;

                case 3:
                    Console.WriteLine("Створимо цілочисельну квадратну матрицю з випадковим розміром і значеннями:");
                    int size = random.Next(5, 11);
                    int[,] matrix1 = new int[size, size];

                    FillRandMatrix(matrix1);
                    PrintMatrix(matrix1);

                    Console.WriteLine("Тепер розмістимо елементи непарних стовпців цієї матриці у порядку спадання:");
                    PlaceMatrixElem(matrix1);
                    PrintMatrix(matrix1);
                    break;

                case 4:
                    Console.WriteLine("Створимо цілочисельну матрицю з випадковим розміром і значеннями");
                    int[,] matrix2 = new int[random.Next(5, 11), random.Next(5, 11)];

                    FillRandMatrix(matrix2);
                    PrintMatrix(matrix2);

                    Console.WriteLine("Переставимо стовпці матриці за ростом характеристики, де характеристика стовця - сума модулів непарних від'ємних елементів стовпця: ");
                    SwapMatrixColumns(matrix2);
                    PrintMatrix(matrix2);
                    break;

                case 5:
                    Console.WriteLine("Створимо цілочисельну матрицю з розміром 8х8 і випадковими значеннями");
                    int[,] matrix3 = new int[8, 8];

                    FillRandMatrix(matrix3);
                    PrintMatrix(matrix3);

                    Console.WriteLine("Тепер знайдемо суми стовпців, де є хоча б один від'ємний елемент: ");

                    int[] columnsSum = CalculColSum(matrix3);
                    PrintVector(columnsSum);
                    break;
            }
            

            Console.WriteLine("\n------------------------------------------------------");
        }
        
    }
}
